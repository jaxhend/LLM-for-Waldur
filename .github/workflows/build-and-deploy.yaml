name: Build, Push & Deploy to Kubernetes

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  filter:
    runs-on: ubuntu-latest
    outputs:
      k8s: ${{ steps.filter.outputs.k8s }}
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            k8s:
              - 'deploy/k8s/**'
            backend:
              - 'backend/**'
              - 'deploy/images/Containerfile.backend'
              - 'deploy/k8s/backend*'
            frontend:
              - 'frontend/**'
              - 'deploy/images/Containerfile.frontend'
              - 'deploy/k8s/frontend*'


  apply-k8s:
    runs-on: ubuntu-latest
    needs: filter
    if: needs.filter.outputs.k8s == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Create Postgres Secret
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        run: |
          kubectl create secret generic pg-cluster-secret \
            --from-literal=username=$POSTGRES_USER \
            --from-literal=password=$POSTGRES_PASSWORD \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Apply K8s Manifests
        uses: ./.github/actions/kube-setup
        with:
          kubeconfig-content: ${{ secrets.KUBECONFIG_CONTENT }}
      - run: kubectl apply -f deploy/k8s/


  build-backend:
    runs-on: ubuntu-latest
    needs: filter
    if: needs.filter.outputs.backend == 'true'
    env:
      BACKEND_IMAGE: ghcr.io/jaxhend/llm-for-waldur/backend
      CACHE_DIR: /tmp/.buildx-cache-backend
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        id: buildx

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Restore Docker build cache
        uses: actions/cache@v3
        with:
          path: ${{ env.CACHE_DIR }}
          key: backend-build-cache-${{ github.sha }}
          restore-keys: backend-build-cache-

      - name: Build and Push Backend
        run: |
          IMAGE_TAG=${GITHUB_SHA}
          docker buildx build \
            --builder ${{ steps.buildx.outputs.name }} \
            --cache-from=type=local,src=${CACHE_DIR} \
            --cache-to=type=local,dest=${CACHE_DIR}-new,mode=max \
            -f deploy/images/Containerfile.backend \
            -t $BACKEND_IMAGE:latest \
            -t $BACKEND_IMAGE:$IMAGE_TAG \
            --push \
            .
          rm -rf ${CACHE_DIR}
          mv ${CACHE_DIR}-new ${CACHE_DIR}

      - name: Deploy Backend to K8s
        uses: ./.github/actions/kube-setup
        with:
          kubeconfig-content: ${{ secrets.KUBECONFIG_CONTENT }}
      - run: |
          kubectl rollout restart deployment/backend


  build-frontend:
    runs-on: ubuntu-latest
    needs: filter
    if: needs.filter.outputs.frontend == 'true'
    env:
      FRONTEND_IMAGE: ghcr.io/jaxhend/llm-for-waldur/frontend
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        id: buildx

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and Push Frontend
        run: |
          IMAGE_TAG=${GITHUB_SHA}
          docker buildx build \
            --builder ${{ steps.buildx.outputs.name }} \
            -f deploy/images/Containerfile.frontend \
            -t $FRONTEND_IMAGE:latest \
            -t $FRONTEND_IMAGE:$IMAGE_TAG \
            --push .

      - name: Deploy Frontend to K8s
        uses: ./.github/actions/kube-setup
        with:
          kubeconfig-content: ${{ secrets.KUBECONFIG_CONTENT }}
      - run: kubectl rollout restart deployment/frontend
